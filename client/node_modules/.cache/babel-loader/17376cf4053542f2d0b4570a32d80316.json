{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nexport const MESSAGE_TYPES = {\n  ADD_USER: \"ADD_USER\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\n  GET_MESSAGES: \"GET_MESSAGES\"\n};\nexport const addUser = _ref => {\n  let {\n    user,\n    message\n  } = _ref;\n  return async dispatch => {\n    console.log(\"message users\", message.users);\n    console.log(\"user\", user);\n\n    if (message.users.every(item => item._id !== user._id)) {\n      dispatch({\n        type: MESSAGE_TYPES.ADD_USER,\n        payload: { ...user,\n          text: '',\n          media: []\n        }\n      });\n    }\n  };\n};\nexport const addMessage = _ref2 => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref2;\n  return async dispatch => {\n    console.log(\"msg\", msg);\n    console.log(\"auth\", auth);\n    console.log(\"Socket\", socket);\n    dispatch({\n      type: MESSAGE_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    socket.emit('addMessage', msg);\n\n    try {\n      await postDataAPI('message', msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = _ref3 => {\n  let {\n    auth,\n    page = 1\n  } = _ref3;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversations.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({ ...cv,\n              text: item.text,\n              media: item.media\n            });\n          }\n        });\n      });\n      dispatch({\n        type: MESSAGE_TYPES.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          result: res.data.result\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessages = _ref4 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref4;\n  return async dispatch => {\n    console.log(\"im in get messages\");\n    console.log(\"id\", id);\n\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      dispatch({\n        type: MESSAGE_TYPES.GET_MESSAGES,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/ruchikaashokbharati/Documents/SocialMediaProject-main/client/src/redux/actions/messageAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","MESSAGE_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","addUser","user","message","dispatch","console","log","users","every","item","_id","type","payload","text","media","addMessage","msg","auth","socket","emit","token","err","ALERT","error","response","data","getConversations","page","res","newArr","conversations","forEach","recipients","cv","push","result","getMessages","id"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\n\r\n\r\nexport const MESSAGE_TYPES = {\r\n  ADD_USER: \"ADD_USER\",\r\n  ADD_MESSAGE: \"ADD_MESSAGE\",\r\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\r\n  GET_MESSAGES: \"GET_MESSAGES\",\r\n};\r\n\r\nexport const addUser = ({ user, message }) => async (dispatch) => {\r\n  console.log(\"message users\",message.users);\r\n  console.log(\"user\",user);\r\n    if(message.users.every(item => item._id !== user._id)){\r\n        dispatch({type: MESSAGE_TYPES.ADD_USER, payload: {...user, text: '', media: []} });\r\n    }\r\n};\r\n\r\nexport const addMessage = ({ msg, auth, socket }) => async (dispatch) => {\r\n console.log(\"msg\",msg);\r\n console.log(\"auth\",auth);\r\n console.log(\"Socket\",socket);\r\n  dispatch({type: MESSAGE_TYPES.ADD_MESSAGE, payload: msg});\r\n  socket.emit('addMessage', msg);\r\n\r\n  try {\r\n    await postDataAPI('message', msg, auth.token)\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n}\r\n\r\nexport const getConversations = ({auth, page = 1 }) => async (dispatch) => {\r\ntry {\r\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\r\n    let newArr = [];\r\n    res.data.conversations.forEach(item => {\r\n      item.recipients.forEach(cv => {\r\n        if(cv._id !== auth.user._id){\r\n          newArr.push({...cv, text: item.text, media: item.media});\r\n        }\r\n      })\r\n    });\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_CONVERSATIONS, payload: {newArr, result: res.data.result} });\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport const getMessages = ({ auth, id, page = 1 }) => async (dispatch) => {\r\n  console.log(\"im in get messages\");\r\n  console.log(\"id\",id);\r\n  try {\r\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_MESSAGES, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}